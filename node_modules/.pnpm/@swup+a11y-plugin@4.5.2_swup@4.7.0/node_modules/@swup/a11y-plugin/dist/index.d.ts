/// <reference path="../src/declarations.d.ts" />
import { Visit } from 'swup';
import Plugin from '@swup/plugin';
import OnDemandLiveRegion from 'on-demand-live-region';
import 'focus-options-polyfill';
export interface VisitA11y {
    /** How to announce the new content after it inserted */
    announce: string | false | undefined;
    /** The element to focus after the content is replaced */
    focus: string | false;
}
declare module 'swup' {
    interface Visit {
        /** Accessibility settings for this visit */
        a11y: VisitA11y;
    }
    interface HookDefinitions {
        'content:announce': undefined;
        'content:focus': undefined;
    }
    interface Swup {
        /**
         * Announce something programmatically
         */
        announce?: SwupA11yPlugin['announce'];
    }
}
/** Templates for announcements of the new page content. */
type Announcements = {
    /** How to announce the new page. */
    visit: string;
    /** How to read a page url. Used as fallback if no heading was found. */
    url: string;
};
/** Translations of announcements, keyed by language. */
type AnnouncementTranslations = {
    [lang: string]: Announcements;
};
type Options = {
    /** The selector for matching the main content area of the page. */
    contentSelector: string;
    /** The selector for finding headings inside the main content area. */
    headingSelector: string;
    /** Whether to skip animations for users that prefer reduced motion. */
    respectReducedMotion: boolean;
    /** How to announce the new page title and url. */
    announcements: Announcements | AnnouncementTranslations;
    /** Whether to focus elements with an [autofocus] attribute after navigation. */
    autofocus: boolean;
    /** How to announce the new page. @deprecated Use the `announcements` option.  */
    announcementTemplate?: string;
    /** How to announce a url. @deprecated Use the `announcements` option. */
    urlTemplate?: string;
};
export default class SwupA11yPlugin extends Plugin {
    name: string;
    requires: {
        swup: string;
    };
    defaults: Options;
    options: Options;
    liveRegion: OnDemandLiveRegion;
    constructor(options?: Partial<Options>);
    mount(): void;
    unmount(): void;
    markAsBusy(): void;
    unmarkAsBusy(): void;
    prepareVisit(visit: Visit): void;
    prepareAnnouncement(visit: Visit): void;
    parseTemplate(str: string, replacements: Record<string, string>): string;
    handleNewPageContent(): void;
    announcePageName(visit: Visit): void;
    announce: (message: string) => void;
    focusPageContent(visit: Visit): Promise<void>;
    getAutofocusElement(): HTMLElement | undefined;
    disableTransitionAnimations(visit: Visit): void;
    disableScrollAnimations(visit: Visit): void;
    shouldAnimate(): boolean;
    needsTabindex(el: HTMLElement): boolean;
}
export {};
