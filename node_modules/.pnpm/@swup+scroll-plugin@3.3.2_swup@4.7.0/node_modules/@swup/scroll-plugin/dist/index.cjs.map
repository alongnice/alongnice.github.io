{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import Plugin from '@swup/plugin';\nimport { Handler, Visit, queryAll } from 'swup';\n// @ts-expect-error\nimport Scrl from 'scrl';\n\nexport type Options = {\n\tdoScrollingRightAway: boolean;\n\tanimateScroll: {\n\t\tbetweenPages: boolean;\n\t\tsamePageWithHash: boolean;\n\t\tsamePage: boolean;\n\t};\n\tscrollFriction: number;\n\tscrollAcceleration: number;\n\tgetAnchorElement?: (hash: string) => Element | null;\n\toffset: number | ((el: Element) => number);\n\tscrollContainers: `[data-swup-scroll-container]`;\n\tshouldResetScrollPosition: (trigger: Element) => boolean;\n\tmarkScrollTarget?: boolean;\n};\n\ntype ScrollPosition = {\n\ttop: number;\n\tleft: number;\n};\n\ntype ScrollPositionsCacheEntry = {\n\twindow: ScrollPosition;\n\tcontainers: ScrollPosition[];\n};\n\ntype ScrollPositionsCache = Record<string, ScrollPositionsCacheEntry>;\n\ndeclare module 'swup' {\n\texport interface Swup {\n\t\tscrollTo?: (offset: number, animate?: boolean) => void;\n\t}\n\n\texport interface VisitScroll {\n\t\t/** Whether scrolling is animated. Set by Scroll Plugin. */\n\t\tanimate?: boolean;\n\t\t/** Whether the scroll position was reset after page load. Set by Scroll Plugin. */\n\t\tscrolledToContent?: boolean;\n\t}\n\n\texport interface HookDefinitions {\n\t\t'scroll:start': undefined;\n\t\t'scroll:end': undefined;\n\t}\n}\n\n/**\n * Scroll Plugin\n */\nexport default class SwupScrollPlugin extends Plugin {\n\tname = 'SwupScrollPlugin';\n\n\trequires = { swup: '>=4.2.0' };\n\n\tscrl: any;\n\n\tdefaults: Options = {\n\t\tdoScrollingRightAway: false,\n\t\tanimateScroll: {\n\t\t\tbetweenPages: true,\n\t\t\tsamePageWithHash: true,\n\t\t\tsamePage: true\n\t\t},\n\t\tscrollFriction: 0.3,\n\t\tscrollAcceleration: 0.04,\n\t\tgetAnchorElement: undefined,\n\t\toffset: 0,\n\t\tscrollContainers: `[data-swup-scroll-container]`,\n\t\tshouldResetScrollPosition: () => true,\n\t\tmarkScrollTarget: false\n\t};\n\n\toptions: Options;\n\n\tcachedScrollPositions: ScrollPositionsCache = {};\n\tpreviousScrollRestoration?: ScrollRestoration;\n\tcurrentCacheKey?: string;\n\n\tconstructor(options: Partial<Options> = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t}\n\n\tmount() {\n\t\tconst swup = this.swup;\n\n\t\tswup.hooks.create('scroll:start');\n\t\tswup.hooks.create('scroll:end');\n\n\t\t// @ts-expect-error: createVisit is currently private, need to make this semi-public somehow\n\t\tconst visit = this.swup.createVisit({ to: this.swup.currentPageUrl });\n\n\t\t// Initialize Scrl lib for smooth animations\n\t\tthis.scrl = new Scrl({\n\t\t\tonStart: () => swup.hooks.callSync('scroll:start', visit, undefined),\n\t\t\tonEnd: () => swup.hooks.callSync('scroll:end', visit, undefined),\n\t\t\tonCancel: () => swup.hooks.callSync('scroll:end', visit, undefined),\n\t\t\tfriction: this.options.scrollFriction,\n\t\t\tacceleration: this.options.scrollAcceleration\n\t\t});\n\n\t\t// Add scrollTo method to swup and animate based on current animateScroll option\n\t\tswup.scrollTo = (offset, animate = true) => {\n\t\t\tif (animate) {\n\t\t\t\tthis.scrl.scrollTo(offset);\n\t\t\t} else {\n\t\t\t\tswup.hooks.callSync('scroll:start', visit, undefined);\n\t\t\t\twindow.scrollTo(0, offset);\n\t\t\t\tswup.hooks.callSync('scroll:end', visit, undefined);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Disable browser scroll restoration for history visits\n\t\t * if `swup.options.animateHistoryBrowsing` is true\n\t\t * Store the previous setting to be able to properly restore it on unmount\n\t\t */\n\t\tthis.previousScrollRestoration = window.history.scrollRestoration;\n\t\tif (swup.options.animateHistoryBrowsing) {\n\t\t\twindow.history.scrollRestoration = 'manual';\n\t\t}\n\n\t\t/**\n\t\t * Mark the current scroll target element with a `data-swup-scroll-target` attribute\n\t\t */\n\t\tthis.updateScrollTarget = this.updateScrollTarget.bind(this);\n\t\tif (this.options.markScrollTarget) {\n\t\t\twindow.addEventListener('popstate', this.updateScrollTarget);\n\t\t\twindow.addEventListener('hashchange', this.updateScrollTarget);\n\t\t\tthis.on('page:view', this.updateScrollTarget);\n\t\t\tthis.on('link:anchor', this.updateScrollTarget);\n\t\t\tthis.on('link:self', this.updateScrollTarget);\n\t\t\tthis.updateScrollTarget();\n\t\t}\n\n\t\t// scroll to the top of the page when a visit starts, before replacing the content\n\t\tthis.before('visit:start', this.onBeforeVisitStart, { priority: -1 });\n\t\tthis.on('visit:start', this.onVisitStart, { priority: 1 });\n\n\t\t// scroll to the top or target element after replacing the content\n\t\tthis.replace('content:scroll', this.handleScrollToContent);\n\n\t\t// scroll to the top of the same page\n\t\tthis.before('link:self', this.onBeforeLinkToSelf, { priority: -1 });\n\t\tthis.replace('scroll:top', this.handleScrollToTop);\n\n\t\t// scroll to an anchor on the same page\n\t\tthis.before('link:anchor', this.onBeforeLinkToAnchor, { priority: -1 });\n\t\tthis.replace('scroll:anchor', this.handleScrollToAnchor);\n\t}\n\n\t/**\n\t * Runs when the plugin is unmounted\n\t */\n\tunmount() {\n\t\tsuper.unmount();\n\n\t\tif (this.previousScrollRestoration) {\n\t\t\twindow.history.scrollRestoration = this.previousScrollRestoration;\n\t\t}\n\n\t\twindow.removeEventListener('popstate', this.updateScrollTarget);\n\t\twindow.removeEventListener('hashchange', this.updateScrollTarget);\n\n\t\tthis.cachedScrollPositions = {};\n\t\tdelete this.swup.scrollTo;\n\t\tdelete this.scrl;\n\t}\n\n\t/**\n\t * Detects if a scroll should be animated, based on context\n\t */\n\tshouldAnimate(context: keyof Options['animateScroll']): boolean {\n\t\tif (typeof this.options.animateScroll === 'boolean') {\n\t\t\treturn this.options.animateScroll;\n\t\t}\n\t\treturn this.options.animateScroll[context];\n\t}\n\n\t/**\n\t * Get an element based on anchor\n\t */\n\tgetAnchorElement = (hash: string = ''): Element | null => {\n\t\t// Look for a custom function provided via the plugin options\n\t\tif (typeof this.options.getAnchorElement === 'function') {\n\t\t\treturn this.options.getAnchorElement(hash);\n\t\t}\n\n\t\treturn this.swup.getAnchorElement(hash);\n\t};\n\n\t/**\n\t * Get the offset for a scroll\n\t */\n\tgetOffset = (el?: Element): number => {\n\t\tif (!el) return 0;\n\t\t// If options.offset is a function, apply and return it\n\t\tif (typeof this.options.offset === 'function') {\n\t\t\treturn parseInt(String(this.options.offset(el)), 10);\n\t\t}\n\t\t// Otherwise, return the sanitized offset\n\t\treturn parseInt(String(this.options.offset), 10);\n\t};\n\n\t/**\n\t * Store scroll animation status in visit object before scrolling up\n\t */\n\tonBeforeLinkToSelf: Handler<'link:self'> = (visit) => {\n\t\tvisit.scroll.animate = this.shouldAnimate('samePage');\n\t};\n\n\t/**\n\t * Scroll to top on `scroll:top` hook\n\t */\n\thandleScrollToTop: Handler<'scroll:top'> = (visit) => {\n\t\tthis.swup.scrollTo?.(0, visit.scroll.animate);\n\t\treturn true;\n\t};\n\n\t/**\n\t * Store scroll animation status in visit object before scrolling to anchor\n\t */\n\tonBeforeLinkToAnchor: Handler<'link:anchor'> = (visit) => {\n\t\tvisit.scroll.animate = this.shouldAnimate('samePageWithHash');\n\t};\n\n\t/**\n\t * Scroll to anchor on `scroll:anchor` hook\n\t */\n\thandleScrollToAnchor: Handler<'scroll:anchor'> = (visit, { hash }) => {\n\t\treturn this.maybeScrollToAnchor(hash, visit.scroll.animate);\n\t};\n\n\t/**\n\t * Attempts to scroll to an anchor\n\t */\n\tmaybeScrollToAnchor(hash?: string, animate: boolean = false): boolean {\n\t\tif (!hash) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst element = this.getAnchorElement(hash);\n\t\tif (!element) {\n\t\t\tconsole.warn(`Anchor target ${hash} not found`);\n\t\t\treturn false;\n\t\t}\n\t\tif (!(element instanceof Element)) {\n\t\t\tconsole.warn(`Anchor target ${hash} is not a DOM node`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst { top: elementTop } = element.getBoundingClientRect();\n\t\tconst top = elementTop + window.scrollY - this.getOffset(element);\n\t\tthis.swup.scrollTo?.(top, animate);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Prepare scrolling before visit:start hook\n\t */\n\tonBeforeVisitStart: Handler<'visit:start'> = (visit) => {\n\t\tvisit.scroll.scrolledToContent = false;\n\t\tvisit.scroll.animate = this.shouldAnimate('betweenPages');\n\t};\n\n\t/**\n\t * Check whether to scroll in `visit:start` hook\n\t */\n\tonVisitStart: Handler<'visit:start'> = (visit) => {\n\t\tthis.cacheScrollPositions(visit.from.url);\n\t\tthis.maybeResetScrollPositions(visit);\n\n\t\tconst scrollTarget = visit.scroll.target ?? visit.to.hash;\n\n\t\t// Conditions for scrolling before content replace:\n\t\t// - scroll is animated (otherwise the effect is useless)\n\t\t// - no scroll target is defined (needs to wait until new content is there)\n\t\tif (visit.scroll.animate && this.options.doScrollingRightAway && !scrollTarget) {\n\t\t\tthis.doScrollingBetweenPages(visit);\n\t\t}\n\t};\n\n\t/**\n\t * Check whether to scroll in `content:scroll` hook\n\t */\n\thandleScrollToContent: Handler<'content:scroll'> = (visit) => {\n\t\tif (!visit.scroll.scrolledToContent) {\n\t\t\tthis.doScrollingBetweenPages(visit);\n\t\t}\n\t\tthis.restoreScrollContainers(visit.to.url);\n\t};\n\n\t/**\n\t * Scrolls the window\n\t */\n\tdoScrollingBetweenPages = (visit: Visit): void => {\n\t\t// Bail early on popstate if not animated: browser will handle it\n\t\tif (visit.history.popstate && !visit.animation.animate) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Try scrolling to a given anchor\n\t\tconst scrollTarget = visit.scroll.target ?? visit.to.hash;\n\t\tif (scrollTarget && this.maybeScrollToAnchor(scrollTarget, visit.scroll.animate)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Allow not resetting scroll position\n\t\tif (!visit.scroll.reset) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Finally, scroll to either the stored scroll position or to the very top of the page\n\t\tconst scrollPositions = this.getCachedScrollPositions(visit.to.url);\n\t\tconst top = scrollPositions?.window?.top || 0;\n\n\t\t// Give possible JavaScript time to execute before scrolling\n\t\trequestAnimationFrame(() => this.swup.scrollTo?.(top, visit.scroll.animate));\n\n\t\tvisit.scroll.scrolledToContent = true;\n\t};\n\n\t/**\n\t * Reset cached scroll positions. Do not reset if:\n\t * - the visit is a history visit\n\t * - the visit is triggered by a link and shouldResetScrollPosition(link) returns false\n\t */\n\tmaybeResetScrollPositions = (visit: Visit): void => {\n\t\tconst { popstate } = visit.history;\n\t\tconst { url } = visit.to;\n\t\tconst { el } = visit.trigger;\n\t\tif (popstate) {\n\t\t\treturn;\n\t\t}\n\t\tif (el && !this.options.shouldResetScrollPosition(el)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.resetScrollPositions(url);\n\t};\n\n\t/**\n\t * Stores the scroll positions for the current URL\n\t */\n\tcacheScrollPositions(url: string): void {\n\t\tconst cacheKey = this.swup.resolveUrl(url);\n\n\t\t// retrieve the current scroll position for all containers\n\t\tconst containers = queryAll(this.options.scrollContainers).map((el) => ({\n\t\t\ttop: el.scrollTop,\n\t\t\tleft: el.scrollLeft\n\t\t}));\n\n\t\t// construct the final object entry, with the window scroll positions added\n\t\tconst positions = {\n\t\t\twindow: { top: window.scrollY, left: window.scrollX },\n\t\t\tcontainers\n\t\t};\n\n\t\tthis.cachedScrollPositions[cacheKey] = positions;\n\t}\n\n\t/**\n\t * Resets stored scroll positions for a given URL\n\t */\n\tresetScrollPositions(url: string): void {\n\t\tconst cacheKey = this.swup.resolveUrl(url);\n\t\tdelete this.cachedScrollPositions[cacheKey];\n\t}\n\n\t/**\n\t * Get the stored scroll positions for a given URL from the cache\n\t */\n\tgetCachedScrollPositions(url: string): ScrollPositionsCacheEntry | undefined {\n\t\tconst cacheKey = this.swup.resolveUrl(url);\n\t\treturn this.cachedScrollPositions[cacheKey];\n\t}\n\n\t/**\n\t * Restore the scroll positions for all matching scrollContainers\n\t */\n\trestoreScrollContainers(url: string): void {\n\t\t// get the stored scroll positions from the cache\n\t\tconst scrollPositions = this.getCachedScrollPositions(url);\n\t\tif (!scrollPositions || scrollPositions.containers.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// cycle through all containers on the current page and restore their scroll positions, if appropriate\n\t\tqueryAll(this.options.scrollContainers).forEach((el, index) => {\n\t\t\tconst scrollPosition = scrollPositions.containers[index];\n\t\t\tif (scrollPosition == null) return;\n\t\t\tel.scrollTop = scrollPosition.top;\n\t\t\tel.scrollLeft = scrollPosition.left;\n\t\t});\n\t}\n\n\tupdateScrollTarget(): void {\n\t\tconst { hash } = window.location;\n\t\tconst currentTarget = document.querySelector('[data-swup-scroll-target]');\n\t\tlet newTarget = this.getAnchorElement(hash);\n\t\tif (newTarget instanceof HTMLBodyElement) {\n\t\t\t// Special case: '#top' fragment returns <body> element\n\t\t\tnewTarget = null;\n\t\t}\n\t\tif (currentTarget === newTarget) {\n\t\t\treturn;\n\t\t}\n\t\tcurrentTarget?.removeAttribute('data-swup-scroll-target');\n\t\tnewTarget?.setAttribute('data-swup-scroll-target', '');\n\t}\n}\n"],"names":["Plugin","constructor","options","super","this","name","requires","swup","scrl","defaults","doScrollingRightAway","animateScroll","betweenPages","samePageWithHash","samePage","scrollFriction","scrollAcceleration","getAnchorElement","undefined","offset","scrollContainers","shouldResetScrollPosition","markScrollTarget","cachedScrollPositions","previousScrollRestoration","currentCacheKey","hash","getOffset","el","parseInt","String","onBeforeLinkToSelf","visit","scroll","animate","shouldAnimate","handleScrollToTop","scrollTo","onBeforeLinkToAnchor","handleScrollToAnchor","maybeScrollToAnchor","onBeforeVisitStart","scrolledToContent","onVisitStart","cacheScrollPositions","from","url","maybeResetScrollPositions","target","to","doScrollingBetweenPages","handleScrollToContent","restoreScrollContainers","history","popstate","animation","scrollTarget","reset","scrollPositions","getCachedScrollPositions","top","window","requestAnimationFrame","trigger","resetScrollPositions","mount","hooks","create","createVisit","currentPageUrl","Scrl","onStart","callSync","onEnd","onCancel","friction","acceleration","scrollRestoration","animateHistoryBrowsing","updateScrollTarget","bind","addEventListener","on","before","priority","replace","unmount","removeEventListener","context","element","console","warn","Element","elementTop","getBoundingClientRect","scrollY","cacheKey","resolveUrl","containers","queryAll","map","scrollTop","left","scrollLeft","positions","scrollX","length","forEach","index","scrollPosition","location","currentTarget","document","querySelector","newTarget","HTMLBodyElement","removeAttribute","setAttribute"],"mappings":"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"}