{"version":3,"file":"index.cjs","sources":["../src/morph.ts","../src/index.ts"],"sourcesContent":["import morphdom from 'morphdom';\n\nexport type UpdateCallback = (fromEl: HTMLElement, toEl: HTMLElement) => boolean;\n\ntype ElementPropertyMap = {\n\t[key: string]: boolean;\n};\n\n/**\n * Morph dom nodes using morphdom, adding helpers and callbacks\n */\n\nconst inputTags: ElementPropertyMap = {\n\tINPUT: true,\n\tTEXTAREA: true,\n\tSELECT: true\n};\n\nconst mutableTags: ElementPropertyMap = {\n\tINPUT: true,\n\tTEXTAREA: true,\n\tOPTION: true\n};\n\nconst textInputTypes: ElementPropertyMap = {\n\t'datetime-local': true,\n\t'select-multiple': true,\n\t'select-one': true,\n\t'color': true,\n\t'date': true,\n\t'datetime': true,\n\t'email': true,\n\t'month': true,\n\t'number': true,\n\t'password': true,\n\t'range': true,\n\t'search': true,\n\t'tel': true,\n\t'text': true,\n\t'textarea': true,\n\t'time': true,\n\t'url': true,\n\t'week': true\n};\n\nconst permanentAttributeName = 'data-morph-persist';\n\nfunction isMutableElement(el: HTMLElement): boolean {\n\treturn mutableTags[el.tagName];\n}\n\nfunction isTextInput(el: HTMLElement): boolean {\n\treturn inputTags[el.tagName] && textInputTypes[(el as HTMLInputElement).type];\n}\n\nfunction verifyNotMutable(fromEl: HTMLElement, toEl: HTMLElement): boolean {\n\t// Skip nodes that are equal: https://github.com/patrick-steele-idem/morphdom#can-i-make-morphdom-blaze-through-the-dom-tree-even-faster-yes\n\tif (!isMutableElement(fromEl) && fromEl.isEqualNode(toEl)) return false;\n\treturn true;\n}\n\nfunction verifyNotPermanent(fromEl: HTMLElement, toEl: HTMLElement): boolean {\n\tconst permanent = fromEl.closest(`[${permanentAttributeName}]`);\n\n\t// only morph attributes on the active non-permanent text input\n\tif (!permanent && isTextInput(fromEl) && fromEl === document.activeElement) {\n\t\tconst ignore: ElementPropertyMap = { value: true };\n\t\tArray.from(toEl.attributes).forEach((attribute) => {\n\t\t\tif (!ignore[attribute.name]) fromEl.setAttribute(attribute.name, attribute.value);\n\t\t});\n\t\treturn false;\n\t}\n\n\treturn !permanent;\n}\n\nfunction verifyNotContentEditable(fromEl: HTMLElement, toEl: HTMLElement): boolean {\n\tif (fromEl === document.activeElement && fromEl.isContentEditable) return false;\n\treturn true;\n}\n\nconst shouldMorphCallbacks = [verifyNotMutable, verifyNotPermanent, verifyNotContentEditable];\n\nfunction shouldMorph(fromEl: HTMLElement, toEl: HTMLElement, callbacks: UpdateCallback[]): boolean {\n\tconst callbackResults = callbacks.map((callback) => {\n\t\treturn typeof callback === 'function' ? callback(fromEl, toEl) : true;\n\t});\n\treturn !callbackResults.includes(false);\n}\n\nfunction morph(from: Node, to: Node | string, updateCallbacks: UpdateCallback[] = []): void {\n\tconst callbacks = [...shouldMorphCallbacks, ...updateCallbacks];\n\treturn morphdom(from, to, {\n\t\tonBeforeElUpdated: (fromEl, toEl) => shouldMorph(fromEl, toEl, callbacks)\n\t});\n}\n\nexport default morph;\n","import { queryAll, type Handler } from 'swup';\nimport Plugin from '@swup/plugin';\n\nimport morph, { type UpdateCallback } from './morph.js';\n\ntype Options = {\n\tcontainers: string[];\n\tupdateCallbacks: UpdateCallback[];\n};\n\nexport default class SwupMorphPlugin extends Plugin {\n\tname = 'SwupMorphPlugin';\n\n\trequires = { swup: '>=4.6' };\n\n\tdefaults: Options = {\n\t\tcontainers: [],\n\t\tupdateCallbacks: []\n\t};\n\toptions: Options;\n\n\tconstructor(options: Partial<Options> = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t}\n\n\tmount() {\n\t\tthis.before('content:replace', this.validateContainers, { priority: 1 });\n\t\tthis.on('content:replace', this.morphContainers);\n\t}\n\n\tprotected validateContainers: Handler<'content:replace'> = (visit) => {\n\t\t// Filter out containers that are already managed by the morph plugin\n\t\tvisit.containers = visit.containers.filter(\n\t\t\t(selector) => !this.options.containers.includes(selector)\n\t\t);\n\t};\n\n\tprotected morphContainers: Handler<'content:replace'> = (visit) => {\n\t\tconst containers = this.getContainers(document, visit.to.document!);\n\t\tconst callbacks = this.options.updateCallbacks || [];\n\n\t\tfor (const { selector, outgoing, incoming } of containers) {\n\t\t\tif (outgoing && incoming) {\n\t\t\t\tmorph(outgoing, incoming, callbacks);\n\t\t\t} else if (this.options.containers.includes(selector)) {\n\t\t\t\tconsole.warn(`SwupMorphPlugin: No container found for selector: ${selector}`);\n\t\t\t}\n\t\t}\n\t};\n\n\tprotected getContainers(oldDoc: Document, newDoc: Document) {\n\t\tconst selectors = this.getContainerSelectors();\n\t\treturn selectors.map((selector) => {\n\t\t\tconst outgoing = oldDoc.querySelector(selector);\n\t\t\tconst incoming = newDoc.querySelector(selector);\n\t\t\treturn { selector, outgoing, incoming };\n\t\t});\n\t}\n\n\tprotected getContainerSelectors() {\n\t\tconst explit = this.options.containers;\n\t\tconst implicit = queryAll('[data-swup-morph]:not([data-swup-morph=\"\"])').map(\n\t\t\t(el) => `[data-swup-morph='${el.dataset.swupMorph}']`\n\t\t);\n\t\treturn this.uniq([...explit, ...implicit ]);\n\t}\n\n\tprotected uniq<T>(array: T[]): T[] {\n\t\treturn [...new Set(array)];\n\t}\n}\n"],"names":["inputTags","INPUT","TEXTAREA","SELECT","mutableTags","OPTION","textInputTypes","color","date","datetime","email","month","number","password","range","search","tel","text","textarea","time","url","week","shouldMorphCallbacks","fromEl","toEl","tagName","isEqualNode","permanent","closest","el","type","document","activeElement","ignore","value","Array","from","attributes","forEach","attribute","name","setAttribute","isContentEditable","morph","to","updateCallbacks","callbacks","morphdom","onBeforeElUpdated","map","callback","includes","shouldMorph","Plugin","constructor","options","super","this","requires","swup","defaults","containers","validateContainers","visit","filter","selector","morphContainers","getContainers","outgoing","incoming","console","warn","mount","before","priority","on","oldDoc","newDoc","getContainerSelectors","querySelector","explit","implicit","queryAll","dataset","swupMorph","uniq","array","Set"],"mappings":"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"}