{"version":3,"file":"index.umd.js","sources":["../node_modules/@swup/plugin/dist/index.modern.js","../node_modules/morphdom/dist/morphdom-esm.js","../src/morph.ts","../src/index.ts"],"sourcesContent":["function r(){return r=Object.assign?Object.assign.bind():function(r){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t])}return r},r.apply(this,arguments)}const n=r=>String(r).split(\".\").map(r=>String(parseInt(r||\"0\",10))).concat([\"0\",\"0\"]).slice(0,3).join(\".\");class e{constructor(){this.isSwupPlugin=!0,this.swup=void 0,this.version=void 0,this.requires={},this.handlersToUnregister=[]}mount(){}unmount(){this.handlersToUnregister.forEach(r=>r()),this.handlersToUnregister=[]}_beforeMount(){if(!this.name)throw new Error(\"You must define a name of plugin when creating a class.\")}_afterUnmount(){}_checkRequirements(){return\"object\"!=typeof this.requires||Object.entries(this.requires).forEach(([r,e])=>{if(!function(r,e,t){const s=function(r,n){var e;if(\"swup\"===r)return null!=(e=n.version)?e:\"\";{var t;const e=n.findPlugin(r);return null!=(t=null==e?void 0:e.version)?t:\"\"}}(r,t);return!!s&&((r,e)=>e.every(e=>{const[,t,s]=e.match(/^([\\D]+)?(.*)$/)||[];var o,i;return((r,n)=>{const e={\"\":r=>0===r,\">\":r=>r>0,\">=\":r=>r>=0,\"<\":r=>r<0,\"<=\":r=>r<=0};return(e[n]||e[\"\"])(r)})((i=s,o=n(o=r),i=n(i),o.localeCompare(i,void 0,{numeric:!0})),t||\">=\")}))(s,e)}(r,e=Array.isArray(e)?e:[e],this.swup)){const n=`${r} ${e.join(\", \")}`;throw new Error(`Plugin version mismatch: ${this.name} requires ${n}`)}}),!0}on(r,n,e={}){var t;n=!(t=n).name.startsWith(\"bound \")||t.hasOwnProperty(\"prototype\")?n.bind(this):n;const s=this.swup.hooks.on(r,n,e);return this.handlersToUnregister.push(s),s}once(n,e,t={}){return this.on(n,e,r({},t,{once:!0}))}before(n,e,t={}){return this.on(n,e,r({},t,{before:!0}))}replace(n,e,t={}){return this.on(n,e,r({},t,{replace:!0}))}off(r,n){return this.swup.hooks.off(r,n)}}export{e as default};\n//# sourceMappingURL=index.modern.js.map\n","var DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n    return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n  return function morphdom(fromNode, toNode, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof toNode === 'string') {\n      if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n        var toNodeHtml = toNode;\n        toNode = doc.createElement('html');\n        toNode.innerHTML = toNodeHtml;\n      } else {\n        toNode = toElement(toNode);\n      }\n    } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n      toNode = toNode.firstElementChild;\n    }\n\n    var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n    var onNodeAdded = options.onNodeAdded || noop;\n    var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n    var onElUpdated = options.onElUpdated || noop;\n    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n    var onNodeDiscarded = options.onNodeDiscarded || noop;\n    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n    var skipFromChildren = options.skipFromChildren || noop;\n    var addChild = options.addChild || function(parent, child){ return parent.appendChild(child); };\n    var childrenOnly = options.childrenOnly === true;\n\n    // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n    var fromNodesLookup = Object.create(null);\n    var keyedRemovalList = [];\n\n    function addKeyedRemoval(key) {\n      keyedRemovalList.push(key);\n    }\n\n    function walkDiscardedChildNodes(node, skipKeyedNodes) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n        while (curChild) {\n\n          var key = undefined;\n\n          if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n            // If we are skipping keyed nodes then we add the key\n            // to a list so that it can be handled at the very end.\n            addKeyedRemoval(key);\n          } else {\n            // Only report the node as discarded if it is not keyed. We do this because\n            // at the end we loop through all keyed elements that were unmatched\n            // and then discard them in one final pass.\n            onNodeDiscarded(curChild);\n            if (curChild.firstChild) {\n              walkDiscardedChildNodes(curChild, skipKeyedNodes);\n            }\n          }\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    /**\n    * Removes a DOM node out of the original DOM\n    *\n    * @param  {Node} node The node to remove\n    * @param  {Node} parentNode The nodes parent\n    * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n    * @return {undefined}\n    */\n    function removeNode(node, parentNode, skipKeyedNodes) {\n      if (onBeforeNodeDiscarded(node) === false) {\n        return;\n      }\n\n      if (parentNode) {\n        parentNode.removeChild(node);\n      }\n\n      onNodeDiscarded(node);\n      walkDiscardedChildNodes(node, skipKeyedNodes);\n    }\n\n    // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n    // function indexTree(root) {\n    //     var treeWalker = document.createTreeWalker(\n    //         root,\n    //         NodeFilter.SHOW_ELEMENT);\n    //\n    //     var el;\n    //     while((el = treeWalker.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n    //\n    // function indexTree(node) {\n    //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n    //     var el;\n    //     while((el = nodeIterator.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    function indexTree(node) {\n      if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n        var curChild = node.firstChild;\n        while (curChild) {\n          var key = getNodeKey(curChild);\n          if (key) {\n            fromNodesLookup[key] = curChild;\n          }\n\n          // Walk recursively\n          indexTree(curChild);\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    indexTree(fromNode);\n\n    function handleNodeAdded(el) {\n      onNodeAdded(el);\n\n      var curChild = el.firstChild;\n      while (curChild) {\n        var nextSibling = curChild.nextSibling;\n\n        var key = getNodeKey(curChild);\n        if (key) {\n          var unmatchedFromEl = fromNodesLookup[key];\n          // if we find a duplicate #id node in cache, replace `el` with cache value\n          // and morph it to the child node.\n          if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n            morphEl(unmatchedFromEl, curChild);\n          } else {\n            handleNodeAdded(curChild);\n          }\n        } else {\n          // recursively call for curChild and it's children to see if we find something in\n          // fromNodesLookup\n          handleNodeAdded(curChild);\n        }\n\n        curChild = nextSibling;\n      }\n    }\n\n    function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n      // We have processed all of the \"to nodes\". If curFromNodeChild is\n      // non-null then we still have some from nodes left over that need\n      // to be removed\n      while (curFromNodeChild) {\n        var fromNextSibling = curFromNodeChild.nextSibling;\n        if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n          // Since the node is keyed it might be matched up later so we defer\n          // the actual removal to later\n          addKeyedRemoval(curFromNodeKey);\n        } else {\n          // NOTE: we skip nested keyed nodes from being removed since there is\n          //       still a chance they will be matched up later\n          removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n        }\n        curFromNodeChild = fromNextSibling;\n      }\n    }\n\n    function morphEl(fromEl, toEl, childrenOnly) {\n      var toElKey = getNodeKey(toEl);\n\n      if (toElKey) {\n        // If an element with an ID is being morphed then it will be in the final\n        // DOM so clear it out of the saved elements collection\n        delete fromNodesLookup[toElKey];\n      }\n\n      if (!childrenOnly) {\n        // optional\n        if (onBeforeElUpdated(fromEl, toEl) === false) {\n          return;\n        }\n\n        // update attributes on original DOM element first\n        morphAttrs(fromEl, toEl);\n        // optional\n        onElUpdated(fromEl);\n\n        if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n          return;\n        }\n      }\n\n      if (fromEl.nodeName !== 'TEXTAREA') {\n        morphChildren(fromEl, toEl);\n      } else {\n        specialElHandlers.TEXTAREA(fromEl, toEl);\n      }\n    }\n\n    function morphChildren(fromEl, toEl) {\n      var skipFrom = skipFromChildren(fromEl, toEl);\n      var curToNodeChild = toEl.firstChild;\n      var curFromNodeChild = fromEl.firstChild;\n      var curToNodeKey;\n      var curFromNodeKey;\n\n      var fromNextSibling;\n      var toNextSibling;\n      var matchingFromEl;\n\n      // walk the children\n      outer: while (curToNodeChild) {\n        toNextSibling = curToNodeChild.nextSibling;\n        curToNodeKey = getNodeKey(curToNodeChild);\n\n        // walk the fromNode children all the way through\n        while (!skipFrom && curFromNodeChild) {\n          fromNextSibling = curFromNodeChild.nextSibling;\n\n          if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          curFromNodeKey = getNodeKey(curFromNodeChild);\n\n          var curFromNodeType = curFromNodeChild.nodeType;\n\n          // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n          var isCompatible = undefined;\n\n          if (curFromNodeType === curToNodeChild.nodeType) {\n            if (curFromNodeType === ELEMENT_NODE) {\n              // Both nodes being compared are Element nodes\n\n              if (curToNodeKey) {\n                // The target node has a key so we want to match it up with the correct element\n                // in the original DOM tree\n                if (curToNodeKey !== curFromNodeKey) {\n                  // The current element in the original DOM tree does not have a matching key so\n                  // let's check our lookup to see if there is a matching element in the original\n                  // DOM tree\n                  if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                    if (fromNextSibling === matchingFromEl) {\n                      // Special case for single element removals. To avoid removing the original\n                      // DOM node out of the tree (since that can break CSS transitions, etc.),\n                      // we will instead discard the current node and wait until the next\n                      // iteration to properly match up the keyed target element with its matching\n                      // element in the original tree\n                      isCompatible = false;\n                    } else {\n                      // We found a matching keyed element somewhere in the original DOM tree.\n                      // Let's move the original DOM node into the current position and morph\n                      // it.\n\n                      // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                      // the `removeNode()` function for the node that is being discarded so that\n                      // all lifecycle hooks are correctly invoked\n                      fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                      // fromNextSibling = curFromNodeChild.nextSibling;\n\n                      if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                      } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                      }\n\n                      curFromNodeChild = matchingFromEl;\n                      curFromNodeKey = getNodeKey(curFromNodeChild);\n                    }\n                  } else {\n                    // The nodes are not compatible since the \"to\" node has a key and there\n                    // is no matching keyed node in the source tree\n                    isCompatible = false;\n                  }\n                }\n              } else if (curFromNodeKey) {\n                // The original has a key\n                isCompatible = false;\n              }\n\n              isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n              if (isCompatible) {\n                // We found compatible DOM elements so transform\n                // the current \"from\" node to match the current\n                // target DOM node.\n                // MORPH\n                morphEl(curFromNodeChild, curToNodeChild);\n              }\n\n            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n              // Both nodes being compared are Text or Comment nodes\n              isCompatible = true;\n              // Simply update nodeValue on the original node to\n              // change the text value\n              if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n              }\n\n            }\n          }\n\n          if (isCompatible) {\n            // Advance both the \"to\" child and the \"from\" child since we found a match\n            // Nothing else to do as we already recursively called morphChildren above\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          // No compatible match so remove the old node from the DOM and continue trying to find a\n          // match in the original DOM. However, we only do this if the from node is not keyed\n          // since it is possible that a keyed node might match up with a node somewhere else in the\n          // target tree and we don't want to discard it just yet since it still might find a\n          // home in the final DOM tree. After everything is done we will remove any keyed nodes\n          // that didn't find a home\n          if (curFromNodeKey) {\n            // Since the node is keyed it might be matched up later so we defer\n            // the actual removal to later\n            addKeyedRemoval(curFromNodeKey);\n          } else {\n            // NOTE: we skip nested keyed nodes from being removed since there is\n            //       still a chance they will be matched up later\n            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n          }\n\n          curFromNodeChild = fromNextSibling;\n        } // END: while(curFromNodeChild) {}\n\n        // If we got this far then we did not find a candidate match for\n        // our \"to node\" and we exhausted all of the children \"from\"\n        // nodes. Therefore, we will just append the current \"to\" node\n        // to the end\n        if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n          // MORPH\n          if(!skipFrom){ addChild(fromEl, matchingFromEl); }\n          morphEl(matchingFromEl, curToNodeChild);\n        } else {\n          var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n          if (onBeforeNodeAddedResult !== false) {\n            if (onBeforeNodeAddedResult) {\n              curToNodeChild = onBeforeNodeAddedResult;\n            }\n\n            if (curToNodeChild.actualize) {\n              curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n            }\n            addChild(fromEl, curToNodeChild);\n            handleNodeAdded(curToNodeChild);\n          }\n        }\n\n        curToNodeChild = toNextSibling;\n        curFromNodeChild = fromNextSibling;\n      }\n\n      cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n      var specialElHandler = specialElHandlers[fromEl.nodeName];\n      if (specialElHandler) {\n        specialElHandler(fromEl, toEl);\n      }\n    } // END: morphChildren(...)\n\n    var morphedNode = fromNode;\n    var morphedNodeType = morphedNode.nodeType;\n    var toNodeType = toNode.nodeType;\n\n    if (!childrenOnly) {\n      // Handle the case where we are given two DOM nodes that are not\n      // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n      if (morphedNodeType === ELEMENT_NODE) {\n        if (toNodeType === ELEMENT_NODE) {\n          if (!compareNodeNames(fromNode, toNode)) {\n            onNodeDiscarded(fromNode);\n            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n          }\n        } else {\n          // Going from an element node to a text node\n          morphedNode = toNode;\n        }\n      } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n        if (toNodeType === morphedNodeType) {\n          if (morphedNode.nodeValue !== toNode.nodeValue) {\n            morphedNode.nodeValue = toNode.nodeValue;\n          }\n\n          return morphedNode;\n        } else {\n          // Text node to something else\n          morphedNode = toNode;\n        }\n      }\n    }\n\n    if (morphedNode === toNode) {\n      // The \"to node\" was not compatible with the \"from node\" so we had to\n      // toss out the \"from node\" and use the \"to node\"\n      onNodeDiscarded(fromNode);\n    } else {\n      if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n        return;\n      }\n\n      morphEl(morphedNode, toNode, childrenOnly);\n\n      // We now need to loop over any keyed nodes that might need to be\n      // removed. We only do the removal if we know that the keyed node\n      // never found a match. When a keyed node is matched up we remove\n      // it out of fromNodesLookup and we use fromNodesLookup to determine\n      // if a keyed node has been matched up or not\n      if (keyedRemovalList) {\n        for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n          var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n          if (elToRemove) {\n            removeNode(elToRemove, elToRemove.parentNode, false);\n          }\n        }\n      }\n    }\n\n    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n      if (morphedNode.actualize) {\n        morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n      }\n      // If we had to swap out the from node with a new node because the old\n      // node was not compatible with the target node then we need to\n      // replace the old DOM node in the original DOM tree. This is only\n      // possible if the original DOM node was part of a DOM tree which\n      // we know is the case if it has a parent node.\n      fromNode.parentNode.replaceChild(morphedNode, fromNode);\n    }\n\n    return morphedNode;\n  };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nexport default morphdom;\n","import morphdom from 'morphdom';\n\nexport type UpdateCallback = (fromEl: HTMLElement, toEl: HTMLElement) => boolean;\n\ntype ElementPropertyMap = {\n\t[key: string]: boolean;\n};\n\n/**\n * Morph dom nodes using morphdom, adding helpers and callbacks\n */\n\nconst inputTags: ElementPropertyMap = {\n\tINPUT: true,\n\tTEXTAREA: true,\n\tSELECT: true\n};\n\nconst mutableTags: ElementPropertyMap = {\n\tINPUT: true,\n\tTEXTAREA: true,\n\tOPTION: true\n};\n\nconst textInputTypes: ElementPropertyMap = {\n\t'datetime-local': true,\n\t'select-multiple': true,\n\t'select-one': true,\n\t'color': true,\n\t'date': true,\n\t'datetime': true,\n\t'email': true,\n\t'month': true,\n\t'number': true,\n\t'password': true,\n\t'range': true,\n\t'search': true,\n\t'tel': true,\n\t'text': true,\n\t'textarea': true,\n\t'time': true,\n\t'url': true,\n\t'week': true\n};\n\nconst permanentAttributeName = 'data-morph-persist';\n\nfunction isMutableElement(el: HTMLElement): boolean {\n\treturn mutableTags[el.tagName];\n}\n\nfunction isTextInput(el: HTMLElement): boolean {\n\treturn inputTags[el.tagName] && textInputTypes[(el as HTMLInputElement).type];\n}\n\nfunction verifyNotMutable(fromEl: HTMLElement, toEl: HTMLElement): boolean {\n\t// Skip nodes that are equal: https://github.com/patrick-steele-idem/morphdom#can-i-make-morphdom-blaze-through-the-dom-tree-even-faster-yes\n\tif (!isMutableElement(fromEl) && fromEl.isEqualNode(toEl)) return false;\n\treturn true;\n}\n\nfunction verifyNotPermanent(fromEl: HTMLElement, toEl: HTMLElement): boolean {\n\tconst permanent = fromEl.closest(`[${permanentAttributeName}]`);\n\n\t// only morph attributes on the active non-permanent text input\n\tif (!permanent && isTextInput(fromEl) && fromEl === document.activeElement) {\n\t\tconst ignore: ElementPropertyMap = { value: true };\n\t\tArray.from(toEl.attributes).forEach((attribute) => {\n\t\t\tif (!ignore[attribute.name]) fromEl.setAttribute(attribute.name, attribute.value);\n\t\t});\n\t\treturn false;\n\t}\n\n\treturn !permanent;\n}\n\nfunction verifyNotContentEditable(fromEl: HTMLElement, toEl: HTMLElement): boolean {\n\tif (fromEl === document.activeElement && fromEl.isContentEditable) return false;\n\treturn true;\n}\n\nconst shouldMorphCallbacks = [verifyNotMutable, verifyNotPermanent, verifyNotContentEditable];\n\nfunction shouldMorph(fromEl: HTMLElement, toEl: HTMLElement, callbacks: UpdateCallback[]): boolean {\n\tconst callbackResults = callbacks.map((callback) => {\n\t\treturn typeof callback === 'function' ? callback(fromEl, toEl) : true;\n\t});\n\treturn !callbackResults.includes(false);\n}\n\nfunction morph(from: Node, to: Node | string, updateCallbacks: UpdateCallback[] = []): void {\n\tconst callbacks = [...shouldMorphCallbacks, ...updateCallbacks];\n\treturn morphdom(from, to, {\n\t\tonBeforeElUpdated: (fromEl, toEl) => shouldMorph(fromEl, toEl, callbacks)\n\t});\n}\n\nexport default morph;\n","import { queryAll, type Handler } from 'swup';\nimport Plugin from '@swup/plugin';\n\nimport morph, { type UpdateCallback } from './morph.js';\n\ntype Options = {\n\tcontainers: string[];\n\tupdateCallbacks: UpdateCallback[];\n};\n\nexport default class SwupMorphPlugin extends Plugin {\n\tname = 'SwupMorphPlugin';\n\n\trequires = { swup: '>=4.6' };\n\n\tdefaults: Options = {\n\t\tcontainers: [],\n\t\tupdateCallbacks: []\n\t};\n\toptions: Options;\n\n\tconstructor(options: Partial<Options> = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t}\n\n\tmount() {\n\t\tthis.before('content:replace', this.validateContainers, { priority: 1 });\n\t\tthis.on('content:replace', this.morphContainers);\n\t}\n\n\tprotected validateContainers: Handler<'content:replace'> = (visit) => {\n\t\t// Filter out containers that are already managed by the morph plugin\n\t\tvisit.containers = visit.containers.filter(\n\t\t\t(selector) => !this.options.containers.includes(selector)\n\t\t);\n\t};\n\n\tprotected morphContainers: Handler<'content:replace'> = (visit) => {\n\t\tconst containers = this.getContainers(document, visit.to.document!);\n\t\tconst callbacks = this.options.updateCallbacks || [];\n\n\t\tfor (const { selector, outgoing, incoming } of containers) {\n\t\t\tif (outgoing && incoming) {\n\t\t\t\tmorph(outgoing, incoming, callbacks);\n\t\t\t} else if (this.options.containers.includes(selector)) {\n\t\t\t\tconsole.warn(`SwupMorphPlugin: No container found for selector: ${selector}`);\n\t\t\t}\n\t\t}\n\t};\n\n\tprotected getContainers(oldDoc: Document, newDoc: Document) {\n\t\tconst selectors = this.getContainerSelectors();\n\t\treturn selectors.map((selector) => {\n\t\t\tconst outgoing = oldDoc.querySelector(selector);\n\t\t\tconst incoming = newDoc.querySelector(selector);\n\t\t\treturn { selector, outgoing, incoming };\n\t\t});\n\t}\n\n\tprotected getContainerSelectors() {\n\t\tconst explit = this.options.containers;\n\t\tconst implicit = queryAll('[data-swup-morph]:not([data-swup-morph=\"\"])').map(\n\t\t\t(el) => `[data-swup-morph='${el.dataset.swupMorph}']`\n\t\t);\n\t\treturn this.uniq([...explit, ...implicit ]);\n\t}\n\n\tprotected uniq<T>(array: T[]): T[] {\n\t\treturn [...new Set(array)];\n\t}\n}\n"],"names":["n","r","String","split","map","parseInt","concat","slice","join","e","every","t","s","match","o","i","localeCompare","numeric","range","doc","document","undefined","HAS_TEMPLATE_SUPPORT","createElement","HAS_RANGE_SUPPORT","createRange","compareNodeNames","fromEl","toEl","fromCodeStart","toCodeStart","fromNodeName","nodeName","toNodeName","charCodeAt","toUpperCase","syncBooleanAttrProp","name","setAttribute","removeAttribute","specialElHandlers","OPTION","parentNode","parentName","hasAttribute","selected","selectedIndex","INPUT","value","TEXTAREA","newValue","firstChild","oldValue","nodeValue","placeholder","SELECT","optgroup","curChild","nextSibling","noop","defaultGetNodeKey","node","getAttribute","id","morphdom","fromNode","toNode","options","toNodeHtml","innerHTML","str","trim","template","content","childNodes","createFragmentFromTemplate","selectNode","body","createContextualFragment","createFragmentFromRange","fragment","createFragmentFromWrap","nodeType","firstElementChild","getNodeKey","onBeforeNodeAdded","onNodeAdded","onBeforeElUpdated","onElUpdated","onBeforeNodeDiscarded","onNodeDiscarded","onBeforeElChildrenUpdated","skipFromChildren","addChild","parent","child","appendChild","childrenOnly","fromNodesLookup","Object","create","keyedRemovalList","addKeyedRemoval","key","push","walkDiscardedChildNodes","skipKeyedNodes","removeNode","removeChild","handleNodeAdded","el","unmatchedFromEl","replaceChild","morphEl","toElKey","attr","attrName","attrNamespaceURI","attrValue","toNodeAttrs","attributes","length","namespaceURI","getAttributeNS","localName","prefix","setAttributeNS","fromNodeAttrs","d","hasAttributeNS","removeAttributeNS","morphAttrs","curToNodeKey","curFromNodeKey","fromNextSibling","toNextSibling","matchingFromEl","skipFrom","curToNodeChild","curFromNodeChild","outer","isSameNode","curFromNodeType","isCompatible","insertBefore","onBeforeNodeAddedResult","actualize","ownerDocument","cleanupFromEl","specialElHandler","morphChildren","indexTree","morphedNode","morphedNodeType","toNodeType","nextChild","moveChildren","createElementNS","len","elToRemove","inputTags","mutableTags","textInputTypes","color","date","datetime","email","month","number","password","search","tel","text","textarea","time","url","week","shouldMorphCallbacks","tagName","isEqualNode","permanent","closest","type","activeElement","ignore","Array","from","forEach","attribute","isContentEditable","morph","to","updateCallbacks","callbacks","callback","includes","shouldMorph","Plugin","constructor","super","this","requires","swup","defaults","containers","validateContainers","visit","filter","selector","morphContainers","getContainers","outgoing","incoming","console","warn","mount","before","priority","on","oldDoc","newDoc","getContainerSelectors","querySelector","explit","implicit","queryAll","dataset","swupMorph","uniq","array","Set"],"mappings":"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"}