{"version":3,"file":"index.module.js","sources":["../src/index.ts"],"sourcesContent":["import Plugin from '@swup/plugin';\nimport { classify, getCurrentUrl, matchPath, updateHistoryRecord } from 'swup';\nimport type { Visit } from 'swup';\n\ndeclare module 'swup' {\n\texport interface VisitFrom {\n\t\t/** Identified route name */\n\t\troute?: string;\n\t}\n\texport interface VisitTo {\n\t\t/** Identified route name */\n\t\troute?: string;\n\t}\n}\n\ntype Route = {\n\t/** The name of the route. */\n\tname: string;\n\t/** The path pattern to match the URL against. */\n\tpath: string;\n};\n\ntype CompiledRoute = Route & {\n\t/** Match function to check if the pattern matches a given URL */\n\tmatches: MatchFunction;\n};\n\ntype MatchOptions = Parameters<typeof matchPath>[1];\ntype MatchFunction = ReturnType<typeof matchPath>;\n\ntype Options = {\n\t/** Array of patterns for identifying named routes. */\n\troutes: Route[];\n\t/** Default route name if no match was found. */\n\tunknownRoute: string;\n\t/** Options for matching paths. Directly passed into `path-to-regexp`. */\n\tmatchOptions: MatchOptions;\n\t/** Add classnames for raw URLs. */\n\tpaths: boolean;\n};\n\nexport default class SwupRouteNamePlugin extends Plugin {\n\tname = 'SwupRouteNamePlugin';\n\n\trequires = { swup: '>=4' };\n\n\tdefaults: Options = {\n\t\troutes: [],\n\t\tunknownRoute: 'unknown',\n\t\tmatchOptions: {},\n\t\tpaths: false\n\t};\n\toptions: Options;\n\n\troutes: CompiledRoute[];\n\n\tconstructor(options: Partial<Options> = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t\tthis.routes = this.compileRoutePatterns();\n\t}\n\n\tmount() {\n\t\t// Save route to current history record\n\t\tthis.swup.visit.to.route = this.getRouteName(getCurrentUrl());\n\t\tthis.updateHistory(this.swup.visit);\n\n\t\tthis.before('visit:start', this.addRouteKey);\n\t\tthis.on('animation:out:start', this.addPathClasses);\n\t\tthis.on('animation:out:start', this.addRouteClasses);\n\t\tthis.on('content:replace', this.updateHistory);\n\t\tthis.on('animation:in:end', this.removeClasses);\n\t}\n\n\t// Compile route patterns to match functions and valid classnames\n\tcompileRoutePatterns() {\n\t\treturn this.options.routes.map((route) => {\n\t\t\tconst name = this.sanitizeRouteName(route.name);\n\t\t\tconst matches = matchPath(route.path, this.options.matchOptions);\n\t\t\treturn { ...route, name, matches };\n\t\t});\n\t}\n\n\tsanitizeRouteName(name: string): string {\n\t\treturn name.replace(/[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~\\s]/g, '');\n\t}\n\n\t// Get route name for any path\n\tgetRouteName(path: string): string | undefined {\n\t\tconst { name } = this.routes.find((route) => route.matches(path)) || {};\n\t\treturn name || undefined;\n\t}\n\n\t// Get path name for any path\n\tgetPathName(path: string) {\n\t\treturn classify(path) || 'homepage';\n\t}\n\n\t// Add a `route` key to the visit object's `from` and `to` properties\n\taddRouteKey(visit: Visit) {\n\t\tif (!this.options.routes.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tvisit.from.route = this.getRouteName(visit.from.url);\n\t\tvisit.to.route = this.getRouteName(visit.to.url!);\n\t\tconst unknown = this.options.unknownRoute;\n\n\t\tthis.swup.log(\n\t\t\t`Route: '${visit.from.route || unknown || '(unknown)'}'` +\n\t\t\t\t` to '${visit.to.route || unknown || '(unknown)'}'`\n\t\t);\n\t}\n\n\t// Add `from-route-*` and `to-route-*` classnames to html tag\n\taddRouteClasses(visit: Visit) {\n\t\tif (!this.options.routes.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst from = visit.from.route;\n\t\tconst to = visit.to.route;\n\t\tconst unknown = this.options.unknownRoute;\n\n\t\tif (from || unknown) {\n\t\t\tdocument.documentElement.classList.add(`from-route-${from || unknown}`);\n\t\t}\n\t\tif (to || unknown) {\n\t\t\tdocument.documentElement.classList.add(`to-route-${to || unknown}`);\n\t\t}\n\t\tif (from && from === to) {\n\t\t\tdocument.documentElement.classList.add('to-same-route');\n\t\t}\n\t}\n\n\t// Add `from-*` and `to-*` classnames for slugified path\n\taddPathClasses(visit: Visit) {\n\t\tif (!this.options.paths) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst from = this.getPathName(visit.from.url);\n\t\tconst to = this.getPathName(visit.to.url!);\n\n\t\tdocument.documentElement.classList.add(`from-${from}`);\n\t\tdocument.documentElement.classList.add(`to-${to}`);\n\t}\n\n\t// Remove `from-*` and `from-route-*` classnames from html tag\n\t// Note: swup removes `to-*` classnames on its own already\n\tremoveClasses() {\n\t\tconst htmlClasses = document.documentElement.className.split(' ');\n\t\tconst removeClasses = htmlClasses.filter((classItem) => classItem.startsWith('from-'));\n\t\tdocument.documentElement.classList.remove(...removeClasses);\n\t}\n\n\tupdateHistory(visit: Visit) {\n\t\tupdateHistoryRecord(undefined, { route: visit.to.route });\n\t}\n}\n"],"names":["SwupRouteNamePlugin","constructor","options","super","this","name","requires","swup","defaults","routes","unknownRoute","matchOptions","paths","compileRoutePatterns","mount","visit","to","route","getRouteName","getCurrentUrl","updateHistory","before","addRouteKey","on","addPathClasses","addRouteClasses","removeClasses","map","sanitizeRouteName","matches","matchPath","path","replace","find","undefined","getPathName","length","from","url","log","unknown","document","documentElement","classList","add","className","split","filter","classItem","startsWith","remove","updateHistoryRecord"],"mappings":"uHAyCqB,MAAoBA,YAexCC,YAAYC,QAAAA,IAAAA,IAAAA,EAA4B,CAAE,GACzCC,QAAQC,KAfTC,KAAO,sBAEPC,KAAAA,SAAW,CAAEC,KAAM,OAAOH,KAE1BI,SAAoB,CACnBC,OAAQ,GACRC,aAAc,UACdC,aAAc,CAAE,EAChBC,OAAO,QAERV,aAAO,EAAAE,KAEPK,YAAM,EAILL,KAAKF,QAAU,IAAKE,KAAKI,YAAaN,GACtCE,KAAKK,OAASL,KAAKS,sBACpB,CAEAC,QAECV,KAAKG,KAAKQ,MAAMC,GAAGC,MAAQb,KAAKc,aAAaC,KAC7Cf,KAAKgB,cAAchB,KAAKG,KAAKQ,OAE7BX,KAAKiB,OAAO,cAAejB,KAAKkB,aAChClB,KAAKmB,GAAG,sBAAuBnB,KAAKoB,gBACpCpB,KAAKmB,GAAG,sBAAuBnB,KAAKqB,iBACpCrB,KAAKmB,GAAG,kBAAmBnB,KAAKgB,eAChChB,KAAKmB,GAAG,mBAAoBnB,KAAKsB,cAClC,CAGAb,uBACC,OAAOT,KAAKF,QAAQO,OAAOkB,IAAKV,IAC/B,MAAUZ,EAAGD,KAAKwB,kBAAkBX,EAAMZ,MAC7BwB,EAAGC,EAAUb,EAAMc,KAAM3B,KAAKF,QAAQS,cACnD,MAAO,IAAKM,EAAOZ,OAAMwB,YAE3B,CAEAD,kBAAkBvB,GACjB,OAAWA,EAAC2B,QAAQ,wCAAyC,GAC9D,CAGAd,aAAaa,GACZ,MAAM1B,KAAEA,GAASD,KAAKK,OAAOwB,KAAMhB,GAAUA,EAAMY,QAAQE,KAAU,CAAA,EACrE,eAAeG,CAChB,CAGAC,YAAYJ,GACX,SAAgBA,IAAS,UAC1B,CAGAT,YAAYP,GACX,IAAKX,KAAKF,QAAQO,OAAO2B,OACxB,OAGDrB,EAAMsB,KAAKpB,MAAQb,KAAKc,aAAaH,EAAMsB,KAAKC,KAChDvB,EAAMC,GAAGC,MAAQb,KAAKc,aAAaH,EAAMC,GAAGsB,KAC5C,QAAgBlC,KAAKF,QAAQQ,aAE7BN,KAAKG,KAAKgC,IACE,WAAAxB,EAAMsB,KAAKpB,OAASuB,GAAW,oBACjCzB,EAAMC,GAAGC,OAASuB,GAAW,eAExC,CAGAf,gBAAgBV,GACf,IAAKX,KAAKF,QAAQO,OAAO2B,OACxB,OAGD,MAAUC,EAAGtB,EAAMsB,KAAKpB,MAClBD,EAAKD,EAAMC,GAAGC,MACPuB,EAAGpC,KAAKF,QAAQQ,cAEzB2B,GAAQG,IACXC,SAASC,gBAAgBC,UAAUC,IAAI,cAAcP,GAAQG,MAE1DxB,GAAMwB,IACTC,SAASC,gBAAgBC,UAAUC,IAAI,YAAY5B,GAAMwB,KAEtDH,GAAQA,IAASrB,GACpByB,SAASC,gBAAgBC,UAAUC,IAAI,gBAEzC,CAGApB,eAAeT,GACd,IAAKX,KAAKF,QAAQU,MACjB,OAGD,MAAUyB,EAAGjC,KAAK+B,YAAYpB,EAAMsB,KAAKC,KACnCtB,EAAKZ,KAAK+B,YAAYpB,EAAMC,GAAGsB,KAErCG,SAASC,gBAAgBC,UAAUC,IAAY,QAAAP,KAC/CI,SAASC,gBAAgBC,UAAUC,IAAU,MAAA5B,IAC9C,CAIAU,gBACC,MACMA,EADce,SAASC,gBAAgBG,UAAUC,MAAM,KAC3BC,OAAQC,GAAcA,EAAUC,WAAW,UAC7ER,SAASC,gBAAgBC,UAAUO,UAAUxB,EAC9C,CAEAN,cAAcL,GACboC,OAAoBjB,EAAW,CAAEjB,MAAOF,EAAMC,GAAGC,OAClD"}