{
  "version": 3,
  "sources": ["../../.pnpm/photoswipe@5.4.4/src/js/util/util.js", "../../.pnpm/photoswipe@5.4.4/src/js/core/eventable.js", "../../.pnpm/photoswipe@5.4.4/src/js/slide/placeholder.js", "../../.pnpm/photoswipe@5.4.4/src/js/slide/content.js", "../../.pnpm/photoswipe@5.4.4/src/js/util/viewport-size.js", "../../.pnpm/photoswipe@5.4.4/src/js/slide/zoom-level.js", "../../.pnpm/photoswipe@5.4.4/src/js/slide/loader.js", "../../.pnpm/photoswipe@5.4.4/src/js/core/base.js", "../../.pnpm/photoswipe@5.4.4/src/js/lightbox/lightbox.js"],
  "sourcesContent": ["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n", "/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n", "import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n", "import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n", "/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n", "const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n", "import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n", "import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n", "import {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isPswpClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n    this.shouldOpen = false;\r\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\r\n    this._preloadedContent = undefined;\r\n\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp) { // ... if PhotoSwipe is already open\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not the ideal way to detect them.\r\n    //\r\n    /** @type {Point | null} */\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    /** @type {DataSource} */\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp || !this.options) {\r\n      return false;\r\n    }\r\n\r\n    // Use the first gallery element if dataSource is not provided\r\n    if (!dataSource && this.options.gallery && this.options.children) {\r\n      const galleryElements = getElementsFromOption(this.options.gallery);\r\n      if (galleryElements[0]) {\r\n        dataSource = {\r\n          gallery: galleryElements[0]\r\n        };\r\n      }\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name]?.forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name]?.forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = undefined;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = undefined;\r\n      delete window.pswp;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    this.pswp?.destroy();\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = {};\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n"],
  "mappings": "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",
  "names": ["createElement", "className", "tagName", "appendToEl", "el", "document", "appendChild", "toTransformString", "x", "y", "scale", "propValue", "undefined", "setWidthHeight", "w", "h", "style", "width", "height", "LOAD_STATE", "IDLE", "LOADING", "LOADED", "ERROR", "specialKeyUsed", "e", "button", "ctrlKey", "metaKey", "altKey", "shiftKey", "getElementsFromOption", "option", "legacySelector", "parent", "elements", "Element", "NodeList", "Array", "isArray", "from", "selector", "querySelectorAll", "isPswpClass", "fn", "prototype", "goTo", "isSafari", "navigator", "vendor", "match", "PhotoSwipeEvent", "constructor", "type", "details", "defaultPrevented", "Object", "assign", "preventDefault", "Eventable", "_listeners", "_filters", "pswp", "options", "addFilter", "name", "priority", "push", "sort", "f1", "f2", "removeFilter", "filter", "applyFilters", "args", "forEach", "apply", "on", "off", "listener", "dispatch", "event", "call", "Placeholder", "imageSrc", "container", "element", "imgEl", "decoding", "alt", "src", "setAttribute", "setDisplayedSize", "transformOrigin", "transform", "destroy", "parentNode", "remove", "Content", "itemData", "instance", "index", "data", "placeholder", "slide", "displayedImageWidth", "displayedImageHeight", "Number", "isAttached", "hasSlide", "isDecoding", "state", "content", "removePlaceholder", "keepPlaceholder", "setTimeout", "load", "isLazy", "reload", "usePlaceholder", "placeholderSrc", "msrc", "isFirstSlide", "placeholderEl", "parentElement", "prepend", "isImageContent", "loadImage", "innerHTML", "html", "updateContentSize", "imageElement", "updateSrcsetSizes", "srcset", "complete", "onLoaded", "onload", "onerror", "onError", "setSlide", "isActive", "heavyAppended", "append", "displayError", "isError", "isLoading", "isInitialSizeUpdate", "isZoomable", "image", "sizesWidth", "dataset", "largestUsedSize", "parseInt", "sizes", "String", "lazyLoad", "errorMsgEl", "innerText", "errorMsg", "supportsDecode", "decode", "catch", "finally", "appendImage", "activate", "holderElement", "deactivate", "getViewportSize", "getViewportSizeFn", "newViewportSize", "documentElement", "clientWidth", "window", "innerHeight", "parsePaddingOption", "prop", "viewportSize", "paddingValue", "paddingFn", "padding", "legacyPropName", "toUpperCase", "slice", "getPanAreaSize", "MAX_IMAGE_WIDTH", "ZoomLevel", "panAreaSize", "elementSize", "fit", "fill", "vFill", "initial", "secondary", "max", "min", "update", "maxWidth", "maxHeight", "hRatio", "vRatio", "Math", "_getInitial", "_getSecondary", "_getMax", "zoomLevels", "slideData", "_parseZoomLevelOption", "optionPrefix", "optionName", "optionValue", "currZoomLevel", "lazyLoadData", "createContentFromData", "zoomLevel", "ceil", "lazyLoadSlide", "getItemData", "PhotoSwipeBase", "getNumItems", "numItems", "dataSource", "length", "items", "_getGalleryDOMElements", "gallery", "dataSourceItem", "_domElementToItemData", "galleryElement", "children", "childSelector", "linkEl", "querySelector", "pswpSrc", "href", "pswpSrcset", "pswpWidth", "pswpHeight", "pswpType", "thumbnailEl", "currentSrc", "getAttribute", "pswpCropped", "cropped", "thumbCropped", "PhotoSwipeLightbox", "_uid", "shouldOpen", "_preloadedContent", "onThumbnailsClick", "bind", "init", "gallerySelector", "addEventListener", "initialPoint", "clientX", "clientY", "clickedIndex", "getClickedIndex", "currentTarget", "loadAndOpen", "getClickedIndexFn", "clickedTarget", "target", "childElements", "clickedChildIndex", "findIndex", "child", "contains", "galleryElements", "initialPointerPos", "preload", "promiseArray", "pswpModuleType", "pswpModule", "Promise", "resolve", "Error", "openPromise", "preloadFirstSlide", "uid", "all", "then", "iterableModules", "mainModule", "_openPhotoswipe", "module", "default", "keys", "contentLoader", "addToCache", "removeEventListener"]
}
