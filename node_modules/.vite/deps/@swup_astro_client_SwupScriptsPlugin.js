import {
  e
} from "./chunk-RU6KZPHD.js";
import "./chunk-EQCVQC35.js";

// node_modules/.pnpm/@swup+scripts-plugin@2.1.0_swup@4.7.0/node_modules/@swup/scripts-plugin/dist/index.modern.js
function e2() {
  return e2 = Object.assign ? Object.assign.bind() : function(t) {
    for (var e3 = 1; e3 < arguments.length; e3++) {
      var r2 = arguments[e3];
      for (var n in r2) Object.prototype.hasOwnProperty.call(r2, n) && (t[n] = r2[n]);
    }
    return t;
  }, e2.apply(this, arguments);
}
var r = class extends e {
  constructor(t = {}) {
    super(), this.name = "SwupScriptsPlugin", this.requires = { swup: ">=4" }, this.defaults = { head: true, body: true, optin: false }, this.options = void 0, this.options = e2({}, this.defaults, t);
  }
  mount() {
    this.on("content:replace", this.runScripts);
  }
  runScripts() {
    const { head: t, body: e3, optin: r2 } = this.options, n = this.getScope({ head: t, body: e3 });
    if (!n) return;
    const s = Array.from(n.querySelectorAll(r2 ? "script[data-swup-reload-script]" : "script:not([data-swup-ignore-script])"));
    s.forEach((t2) => this.runScript(t2)), this.swup.log(`Executed ${s.length} scripts.`);
  }
  runScript(t) {
    const e3 = document.createElement("script");
    for (const { name: r2, value: n } of t.attributes) e3.setAttribute(r2, n);
    return e3.textContent = t.textContent, t.replaceWith(e3), e3;
  }
  getScope({ head: t, body: e3 }) {
    return t && e3 ? document : t ? document.head : e3 ? document.body : null;
  }
};
export {
  r as default
};
//# sourceMappingURL=@swup_astro_client_SwupScriptsPlugin.js.map
