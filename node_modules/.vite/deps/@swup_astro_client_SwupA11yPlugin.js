import {
  l,
  w
} from "./chunk-4G7MLUAF.js";
import {
  e
} from "./chunk-RU6KZPHD.js";
import {
  __commonJS,
  __toESM
} from "./chunk-EQCVQC35.js";

// node_modules/.pnpm/on-demand-live-region@0.1.3/node_modules/on-demand-live-region/on-demand-live-region.js
var require_on_demand_live_region = __commonJS({
  "node_modules/.pnpm/on-demand-live-region@0.1.3/node_modules/on-demand-live-region/on-demand-live-region.js"(exports, module) {
    (function(global) {
      "use strict";
      function OnDemandLiveRegion(options) {
        options = options || {};
        this.settings = {
          level: "polite",
          parent: "body",
          idPrefix: "live-region-",
          delay: 0
        };
        for (var setting in options) {
          if (options.hasOwnProperty(setting)) {
            this.settings[setting] = options[setting];
          }
        }
        this.settings.parent = document.querySelector(this.settings.parent);
      }
      OnDemandLiveRegion.prototype.say = function(thingToSay, delay) {
        var oldRegion = this.settings.parent.querySelector('[id^="' + this.settings.idPrefix + '"]') || false;
        if (oldRegion) {
          this.settings.parent.removeChild(oldRegion);
        }
        delay = delay || this.settings.delay;
        this.currentRegion = document.createElement("span");
        this.currentRegion.id = this.settings.idPrefix + Math.floor(Math.random() * 1e4);
        var role = this.settings.level !== "assertive" ? "status" : "alert";
        this.currentRegion.setAttribute("aria-live", this.settings.level);
        this.currentRegion.setAttribute("role", role);
        this.currentRegion.setAttribute("style", "clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px");
        this.settings.parent.appendChild(this.currentRegion);
        window.setTimeout((function() {
          this.currentRegion.textContent = thingToSay;
        }).bind(this), delay);
        return this;
      };
      if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
        module.exports = OnDemandLiveRegion;
      } else if (typeof define === "function" && define.amd) {
        define("OnDemandLiveRegion", [], function() {
          return OnDemandLiveRegion;
        });
      } else if (typeof global === "object") {
        global.OnDemandLiveRegion = OnDemandLiveRegion;
      }
    })(exports);
  }
});

// node_modules/.pnpm/@swup+a11y-plugin@4.5.2_swup@4.7.0/node_modules/@swup/a11y-plugin/dist/index.modern.js
var import_on_demand_live_region = __toESM(require_on_demand_live_region());

// node_modules/.pnpm/focus-options-polyfill@1.6.0/node_modules/focus-options-polyfill/index.js
(function() {
  if (typeof window === "undefined" || typeof document === "undefined" || typeof HTMLElement === "undefined") {
    return;
  }
  var supportsPreventScrollOption = false;
  try {
    var focusElem = document.createElement("div");
    focusElem.addEventListener(
      "focus",
      function(event) {
        event.preventDefault();
        event.stopPropagation();
      },
      true
    );
    focusElem.focus(
      Object.defineProperty({}, "preventScroll", {
        get: function() {
          if (navigator && typeof navigator.userAgent !== "undefined" && navigator.userAgent && navigator.userAgent.match(/Edge\/1[7-8]/)) {
            return supportsPreventScrollOption = false;
          }
          supportsPreventScrollOption = true;
        }
      })
    );
  } catch (e2) {
  }
  if (HTMLElement.prototype.nativeFocus === void 0 && !supportsPreventScrollOption) {
    HTMLElement.prototype.nativeFocus = HTMLElement.prototype.focus;
    var calcScrollableElements = function(element) {
      var parent = element.parentNode;
      var scrollableElements = [];
      var rootScrollingElement = document.scrollingElement || document.documentElement;
      while (parent && parent !== rootScrollingElement) {
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) {
          scrollableElements.push([
            parent,
            parent.scrollTop,
            parent.scrollLeft
          ]);
        }
        parent = parent.parentNode;
      }
      parent = rootScrollingElement;
      scrollableElements.push([parent, parent.scrollTop, parent.scrollLeft]);
      return scrollableElements;
    };
    var restoreScrollPosition = function(scrollableElements) {
      for (var i2 = 0; i2 < scrollableElements.length; i2++) {
        scrollableElements[i2][0].scrollTop = scrollableElements[i2][1];
        scrollableElements[i2][0].scrollLeft = scrollableElements[i2][2];
      }
      scrollableElements = [];
    };
    var patchedFocus = function(args) {
      if (args && args.preventScroll) {
        var evScrollableElements = calcScrollableElements(this);
        if (typeof setTimeout === "function") {
          var thisElem = this;
          setTimeout(function() {
            thisElem.nativeFocus();
            restoreScrollPosition(evScrollableElements);
          }, 0);
        } else {
          this.nativeFocus();
          restoreScrollPosition(evScrollableElements);
        }
      } else {
        this.nativeFocus();
      }
    };
    HTMLElement.prototype.focus = patchedFocus;
  }
})();

// node_modules/.pnpm/@swup+a11y-plugin@4.5.2_swup@4.7.0/node_modules/@swup/a11y-plugin/dist/index.modern.js
function o() {
  return o = Object.assign ? Object.assign.bind() : function(e2) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var i2 in n) Object.prototype.hasOwnProperty.call(n, i2) && (e2[i2] = n[i2]);
    }
    return e2;
  }, o.apply(this, arguments);
}
var s = class extends e {
  constructor(e2 = {}) {
    var t, n;
    super(), this.name = "SwupA11yPlugin", this.requires = { swup: ">=4" }, this.defaults = { contentSelector: "main", headingSelector: "h1, h2, [role=heading]", respectReducedMotion: false, autofocus: false, announcements: { visit: "Navigated to: {title}", url: "New page at {url}" } }, this.options = void 0, this.liveRegion = void 0, this.announce = (e3) => {
      this.liveRegion.say(e3);
    }, e2.announcements = o({}, this.defaults.announcements, { visit: null != (t = e2.announcementTemplate) ? t : String(this.defaults.announcements.visit), url: null != (n = e2.urlTemplate) ? n : String(this.defaults.announcements.url) }, e2.announcements), this.options = o({}, this.defaults, e2), this.liveRegion = new import_on_demand_live_region.default();
  }
  mount() {
    this.swup.hooks.create("content:announce"), this.swup.hooks.create("content:focus"), this.before("visit:start", this.prepareVisit), this.on("visit:start", this.markAsBusy), this.on("visit:end", this.unmarkAsBusy), this.on("content:replace", this.prepareAnnouncement), this.on("content:replace", this.handleNewPageContent), this.options.respectReducedMotion && (this.before("visit:start", this.disableTransitionAnimations), this.before("visit:start", this.disableScrollAnimations), this.before("link:self", this.disableScrollAnimations), this.before("link:anchor", this.disableScrollAnimations)), this.swup.announce = this.announce;
  }
  unmount() {
    this.swup.announce = void 0;
  }
  markAsBusy() {
    document.documentElement.setAttribute("aria-busy", "true");
  }
  unmarkAsBusy() {
    document.documentElement.removeAttribute("aria-busy");
  }
  prepareVisit(e2) {
    e2.a11y = { announce: void 0, focus: this.options.contentSelector };
  }
  prepareAnnouncement(t) {
    if (void 0 !== t.a11y.announce) return;
    const { contentSelector: n, headingSelector: i2, announcements: o2 } = this.options, { href: s2, url: a, pathname: r } = l.fromUrl(window.location.href), u = o2[document.documentElement.lang || "*"] || o2["*"] || o2;
    if ("object" != typeof u) return;
    const c = document.querySelector(`${n} ${i2}`);
    let l2 = (null == c ? void 0 : c.getAttribute("aria-label")) || (null == c ? void 0 : c.textContent);
    l2 = l2 || document.title || this.parseTemplate(u.url, { href: s2, url: a, path: r });
    const h = this.parseTemplate(u.visit, { title: l2, href: s2, url: a, path: r });
    t.a11y.announce = h;
  }
  parseTemplate(e2, t) {
    return Object.keys(t).reduce((e3, n) => e3.replace(`{${n}}`, t[n] || ""), e2 || "");
  }
  handleNewPageContent() {
    var e2 = this;
    w().then(async function() {
      e2.swup.hooks.call("content:announce", void 0, void 0, (t) => {
        e2.announcePageName(t);
      }), e2.swup.hooks.call("content:focus", void 0, void 0, (t) => {
        e2.focusPageContent(t);
      });
    });
  }
  announcePageName(e2) {
    e2.a11y.announce && this.liveRegion.say(e2.a11y.announce);
  }
  async focusPageContent(e2) {
    if (!e2.a11y.focus) return;
    if (this.options.autofocus) {
      const t2 = this.getAutofocusElement();
      if (t2 && t2 !== document.activeElement) return void this.swup.hooks.once("visit:end", (n) => {
        n.id === e2.id && t2.focus();
      });
    }
    const t = document.querySelector(e2.a11y.focus);
    t instanceof HTMLElement && (this.needsTabindex(t) && t.setAttribute("tabindex", "-1"), t.focus({ preventScroll: true }));
  }
  getAutofocusElement() {
    const e2 = document.querySelector("body [autofocus]");
    if (e2 && !e2.closest('inert, [aria-disabled], [aria-hidden="true"]')) return e2;
  }
  disableTransitionAnimations(e2) {
    e2.animation.animate = e2.animation.animate && this.shouldAnimate();
  }
  disableScrollAnimations(e2) {
    e2.scroll.animate = e2.scroll.animate && this.shouldAnimate();
  }
  shouldAnimate() {
    return !window.matchMedia("(prefers-reduced-motion: reduce)").matches;
  }
  needsTabindex(e2) {
    return !e2.matches("a, button, input, textarea, select, details, [tabindex]");
  }
};
export {
  s as default
};
//# sourceMappingURL=@swup_astro_client_SwupA11yPlugin.js.map
